// WordTable.js
// Hi·ªÉn th·ªã b·∫£ng t·ª´ v·ª±ng, cho ph√©p l·ªçc theo nh√≥m, ch·ªçn ch·∫ø ƒë·ªô h·ªçc (Reading/Listening), v√† b·∫Øt ƒë·∫ßu quiz theo nh√≥m/ch·∫ø ƒë·ªô

import React, { useEffect, useState } from 'react';
import { FaVolumeUp } from 'react-icons/fa';
import ReadingQuiz from './ReadingQuiz';
import ListeningQuiz from './ListeningQuiz';

export default function WordTable() {
  // State l∆∞u danh s√°ch t·ª´ v·ª±ng l·∫•y t·ª´ Google Sheet
  const [words, setWords] = useState([]);
  // L·ªçc theo nh√≥m t·ª´
  const [groupFilter, setGroupFilter] = useState('');
  // Ch·ªâ hi·ªán t·ª´ c·∫ßn √¥n (theo stage)
  const [showReviewOnly, setShowReviewOnly] = useState(true);
  // Ch·∫ø ƒë·ªô h·ªçc: reading/listening
  const [mode, setMode] = useState('');
  // Hi·ªÉn th·ªã quiz hay kh√¥ng
  const [showQuiz, setShowQuiz] = useState(false);

  // L·∫•y d·ªØ li·ªáu t·ª´ Google Sheet khi load component
  useEffect(() => {
    const fetchData = async () => {
      const res = await fetch(
        'https://docs.google.com/spreadsheets/d/1Ojx3jW6dJfzQyEDP0M3Of9I8KnxVNxsus7PQLL8VP8I/gviz/tq?tqx=out:json&sheet=T%E1%BB%AB%20v%E1%BB%B1ng&time=' + new Date().getTime()
      );
      const text = await res.text();
      const json = JSON.parse(text.substr(47).slice(0, -2));

      // Parse t·ª´ng d√≤ng th√†nh object t·ª´ v·ª±ng
      const rows = json.table.rows.map(row => {
        const c = row.c;
        return {
          word: c[0]?.v || '',
          meaning: c[1]?.v || '',
          example: c[3]?.v || '',
          ipa: c[4]?.v || '',
          synonym: c[5]?.v || '',
          antonym: c[6]?.v || '',
          phrase: c[8]?.v || '',
          stage: c[9]?.v || '',
          audio: c[15]?.v || '', // URL audio n·∫øu c√≥
          group: c[14]?.v || ''
        };
      });

      setWords(rows);
    };

    fetchData();
  }, []);

  // Ph√°t √¢m t·ª´ v·ª±ng
  const speak = (text) => {
    const utter = new SpeechSynthesisUtterance(text);
    utter.lang = 'en-US';
    speechSynthesis.speak(utter);
  };

  // L·ªçc t·ª´ v·ª±ng theo nh√≥m v√† tr·∫°ng th√°i c·∫ßn √¥n
  const filteredWords = words.filter(w => {
    const matchStage = showReviewOnly ? w.stage.includes('C·∫ßn √¥n') : true;
    const matchGroup = groupFilter ? w.group === groupFilter : true;
    return matchStage && matchGroup;
  });

  // L·∫•y danh s√°ch nh√≥m t·ª´ duy nh·∫•t
  const uniqueGroups = [...new Set(
    words
      .filter(w => !showReviewOnly || w.stage.includes('C·∫ßn √¥n'))
      .map(w => w.group)
      .filter(Boolean)
  )];

  // Ch·ªçn ch·∫ø ƒë·ªô h·ªçc (ch·ªâ ch·ªçn 1 trong 2)
  const handleModeChange = (selectedMode) => {
    setMode(prev => (prev === selectedMode ? '' : selectedMode));
  };

  // B·∫Øt ƒë·∫ßu quiz theo ch·∫ø ƒë·ªô ƒë√£ ch·ªçn
  const handleStudy = () => {
    if (mode === 'reading') {
      setShowQuiz(true);
    } else if (mode === 'listening') {
      setShowQuiz(true);
    } else {
      alert(`B·∫°n h√£y ch·ªçn ch·∫ø ƒë·ªô Reading ho·∫∑c Listening tr∆∞·ªõc khi h·ªçc.`);
    }
  };

  // N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô quiz th√¨ render quiz t∆∞∆°ng ·ª©ng
  if (showQuiz) {
    return mode === 'reading'
      ? <ReadingQuiz words={filteredWords} onBack={() => setShowQuiz(false)} />
      : <ListeningQuiz words={filteredWords} onBack={() => setShowQuiz(false)} />;
  }

  return (
    <div className="p-4">
      {/* Ti√™u ƒë·ªÅ */}
      <h2 className="text-xl md:text-2xl font-bold mb-4 text-center text-pastel-navy">
        T·ª´ v·ª±ng c·∫ßn √¥n <span className="inline-block ml-1">üìö</span>
      </h2>

      {/* B·ªô l·ªçc nh√≥m t·ª´ v√† tr·∫°ng th√°i c·∫ßn √¥n */}
      <div className="flex flex-wrap justify-center items-center gap-4 mb-2">
        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={showReviewOnly}
            onChange={() => setShowReviewOnly(!showReviewOnly)}
          />
          Ch·ªâ hi·ªán t·ª´ c·∫ßn √¥n
        </label>

        <select
          className="border rounded p-2"
          value={groupFilter}
          onChange={(e) => setGroupFilter(e.target.value)}
        >
          <option value="">T·∫•t c·∫£ nh√≥m t·ª´</option>
          {uniqueGroups.map((g, i) => (
            <option key={i} value={g}>{g}</option>
          ))}
        </select>
      </div>

      {/* Ch·ªçn ch·∫ø ƒë·ªô h·ªçc v√† n√∫t b·∫Øt ƒë·∫ßu */}
      <div className="flex flex-wrap justify-center items-center gap-4 mb-4">
        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={mode === 'listening'}
            onChange={() => handleModeChange('listening')}
          />
          Listening
        </label>

        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={mode === 'reading'}
            onChange={() => handleModeChange('reading')}
          />
          Reading
        </label>

        <button
          onClick={handleStudy}
          className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded shadow"
        >
          H·ªçc
        </button>
      </div>

      {/* B·∫£ng t·ª´ v·ª±ng */}
      <div className="overflow-x-auto shadow rounded-xl">
        <table className="w-full table-auto border-collapse rounded-lg overflow-hidden shadow-lg">
          <thead className="bg-gradient-to-r from-yellow-100 to-yellow-300 text-sm md:text-base text-gray-800 font-semibold">
            <tr>
              <th className="border p-3 text-center">T·ª´ v·ª±ng</th>
              <th className="border p-3 text-center">Nghƒ©a</th>
              <th className="border p-3 text-center">Nghe</th>
              <th className="border p-3 hidden lg:table-cell text-center">V√≠ d·ª•</th>
              <th className="border p-3 hidden lg:table-cell text-center">ƒê·ªìng nghƒ©a</th>
              <th className="border p-3 hidden xl:table-cell text-center">Tr√°i nghƒ©a</th>
              <th className="border p-3 hidden xl:table-cell text-center">C·ª•m t·ª´</th>
              <th className="border p-3 hidden xl:table-cell text-center">Nh√≥m t·ª´</th>
            </tr>
          </thead>
          <tbody className="text-sm md:text-base">
            {filteredWords.map((w, i) => (
              <tr key={i} className="even:bg-blue-50 hover:bg-blue-100 transition duration-200">
                <td className="border p-2 font-semibold text-pastel-navy text-center">{w.word}</td>
                <td className="border p-2 text-center">{w.meaning}</td>
                <td className="border p-2 text-center">
                  <div className="flex justify-center items-center space-x-2">
                    <span className="hidden md:inline">{w.ipa}</span>
                    {w.word && (
                      <button
                        onClick={() => speak(w.word)}
                        className="text-blue-500 hover:text-blue-700 hover:scale-110 transition-transform duration-150"
                        title="Ph√°t √¢m"
                      >
                        <FaVolumeUp />
                      </button>
                    )}
                  </div>
                </td>
                <td className="border p-2 hidden lg:table-cell text-left">{w.example}</td>
                <td className="border p-2 hidden lg:table-cell text-left">{w.synonym}</td>
                <td className="border p-2 hidden xl:table-cell text-left">{w.antonym}</td>
                <td className="border p-2 hidden xl:table-cell text-left">{w.phrase}</td>
                <td className="border p-2 hidden xl:table-cell text-left">{w.group}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}